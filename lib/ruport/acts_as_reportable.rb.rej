--- lib/ruport/acts_as_reportable.rb
+++ lib/ruport/acts_as_reportable.rb
@@ -1,21 +1,25 @@
-# Ruport : Extensible Reporting System                                
+# Ruport : Extensible Reporting System
 #
 # acts_as_reportable.rb provides ActiveRecord integration for Ruport.
-#     
+#
 # Originally created by Dudley Flanders, 2006
-# Revised and updated by Michael Milner, 2007     
-# Copyright (C) 2006-2007 Dudley Flanders / Michael Milner, All Rights Reserved.  
+# Revised and updated by Michael Milner, 2007
+# Copyright (C) 2006-2007 Dudley Flanders / Michael Milner, All Rights Reserved.
 #
 # This is free software distributed under the same terms as Ruby 1.8
-# See LICENSE and COPYING for details.   
+# See LICENSE and COPYING for details.
 #
 require "ruport"
 Ruport.quiet { require "active_record" }
 
+require 'facets/kernel/instance_class'
+require 'facets/kernel/returning'
+
+
 module Ruport
-  
+
   # === Overview
-  # 
+  #
   # This module is designed to allow an ActiveRecord model to be converted to
   # Ruport's data structures.  If ActiveRecord is available when Ruport is
   # loaded, this module will be automatically mixed into ActiveRecord::Base.
@@ -34,19 +38,19 @@
   #   Book.report_table(:all, :include => :author)
   #
   module Reportable
-    
+
     def self.included(base) #:nodoc:
-      base.extend ClassMethods  
+      base.extend ClassMethods
     end
-    
+
     # === Overview
-    # 
+    #
     # This module contains class methods that will automatically be available
     # to ActiveRecord models.
     #
-    module ClassMethods 
-      
-      # In the ActiveRecord model you wish to integrate with Ruport, add the 
+    module ClassMethods
+
+      # In the ActiveRecord model you wish to integrate with Ruport, add the
       # following line just below the class definition:
       #
       #   acts_as_reportable
@@ -79,16 +83,16 @@
         extend Ruport::Reportable::SingletonMethods
       end
     end
-    
+
     # === Overview
-    # 
+    #
     # This module contains methods that will be made available as singleton
     # class methods to any ActiveRecord model that calls
     # <tt>acts_as_reportable</tt>.
     #
     module SingletonMethods
-      
-      # Creates a Ruport::Data::Table from an ActiveRecord find. Takes 
+
+      # Creates a Ruport::Data::Table from an ActiveRecord find. Takes
       # parameters just like a regular find.
       #
       # Additional options include:
@@ -162,20 +166,28 @@
         unless options.delete(:eager_loading) == false
           options[:include] = get_include_for_find(includes)
         end
-        
+
         data = [find(number, options)].flatten
         data = data.map {|r| r.reportable_data(:include => includes,
                                :only => only,
                                :except => except,
-                               :methods => methods) }.flatten   
+                               :methods => methods) }.flatten
 
-        table = Ruport::Data::Table.new(:data => data,
+        returning Ruport::Data::Table.new(
+                                        :data => data,
                                         :column_names => aar_columns,
                                         :record_class => record_class,
                                         :filters => filters,
-                                        :transforms => transforms )
+                                        :transforms => transforms
+        ) do |table|
+          table.instance_class do
+            define_method(:raw_data) do
+              data
+            end
+          end
+        end
       end
-      
+
       # Creates a Ruport::Data::Table from an ActiveRecord find_by_sql.
       #
       # Additional options include:
@@ -215,7 +227,7 @@
       end
 
       private
-      
+
       def get_include_for_find(report_option)
         includes = report_option.blank? ? aar_options[:include] : report_option
         if includes.is_a?(Hash)
@@ -237,20 +249,20 @@
         end
       end
     end
-    
+
     # === Overview
-    # 
+    #
     # This module contains methods that will be made available as instance
     # methods to any ActiveRecord model that calls <tt>acts_as_reportable</tt>.
     #
     module InstanceMethods
-      
+
       # Grabs all of the object's attributes and the attributes of the
       # associated objects and returns them as an array of record hashes.
-      # 
+      #
       # Associated object attributes are stored in the record with
       # "association.attribute" keys.
-      # 
+      #
       # Passing :only as an option will only get those attributes.
       # Passing :except as an option will exclude those attributes.
       # Must pass :include as an option to access associations.  Options
@@ -290,7 +302,7 @@
       def reportable_data(options = {})
         options = options.merge(self.class.aar_options) unless
           has_report_options?(options)
-        
+
         data_records = [get_attributes_with_options(options)]
         Array(options[:methods]).each do |method|
           if options[:qualify_attribute_names]
@@ -300,21 +312,21 @@
           end
           data_records.first[m] = send(method)
         end
-        
+
         # Reorder columns to match options[:only]
         if Array === options[:only]
           cols = options[:only].map {|c| c.to_s }
           self.class.aar_columns = cols
         end
-                            
-        self.class.aar_columns |= data_records.first.keys  
-        
+
+        self.class.aar_columns |= data_records.first.keys
+
         data_records =
-          add_includes(data_records, options[:include]) if options[:include] 
-          
+          add_includes(data_records, options[:include]) if options[:include]
+
         data_records
       end
-      
+
       private
 
       # Add data for all included associations
@@ -322,20 +334,20 @@
       def add_includes(data_records, includes)
         include_has_options = includes.is_a?(Hash)
         associations = include_has_options ? includes.keys : Array(includes)
-        
+
         associations.each do |association|
           existing_records = data_records.dup
           data_records = []
-          
+
           if include_has_options
             assoc_options = includes[association].merge({
               :qualify_attribute_names => association })
           else
             assoc_options = { :qualify_attribute_names => association }
           end
-          
+
           association_objects = [send(association)].flatten.compact
-          
+
           existing_records.each do |existing_record|
             if association_objects.empty?
               data_records << existing_record
@@ -352,7 +364,7 @@
         end
         data_records
       end
-      
+
       # Check if the options hash has any report options
       # (:only, :except, :methods, or :include).
       #
